//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Scripts/Controls/PlayerControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControls"",
    ""maps"": [
        {
            ""name"": ""WorldControls"",
            ""id"": ""0af8ce33-2806-461b-8a16-aeea7e67fd0c"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""PassThrough"",
                    ""id"": ""6e98871f-45b9-401f-93bd-06e417b63ef4"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""fc5cb269-90a8-4391-a2d6-30942c5accc1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Consume"",
                    ""type"": ""Button"",
                    ""id"": ""5fc8d81e-f150-438a-a901-a3947f2cc25b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Pick Up Object"",
                    ""type"": ""Button"",
                    ""id"": ""5d83323c-6a6a-495c-b484-6a4be7105eac"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Scorpion's Tail"",
                    ""type"": ""Button"",
                    ""id"": ""eb8dd400-1f90-4725-9a66-0559198893ee"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""5a0a71a5-d4a6-44c8-9136-bfc5c3fc52dc"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""left"",
                    ""id"": ""63c49308-5b0d-45dc-bdb5-80d2d9efc4fa"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""1412f696-6b9b-469a-a24a-28a079a8f354"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""f52c16a9-1b4a-45d1-af2b-0139624bdea9"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8759be0e-7a34-43eb-a81a-a87535067af4"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Consume"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""81897daa-33cf-45a8-8620-f931a4f053dd"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pick Up Object"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7f5250f1-6f68-4c4e-a2fc-33cf75f0bbd6"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Scorpion's Tail"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""CasinoControls"",
            ""id"": ""8d8a7f04-d13d-4a71-870b-3d9aaa1cc8da"",
            ""actions"": [
                {
                    ""name"": ""Select Card"",
                    ""type"": ""Button"",
                    ""id"": ""d4d12673-f761-4413-9a0c-f697e52334ed"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Roll Dice"",
                    ""type"": ""Button"",
                    ""id"": ""2a1d09ce-b6d7-4022-bad1-f9729943250f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Spin Slots"",
                    ""type"": ""Button"",
                    ""id"": ""20717e97-d7fb-4b30-bf12-4c5c6b266ddd"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""3eb76c4a-20eb-4f49-b3a0-6de52cae32b6"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Select Card"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b9cc9b8a-f3a5-4c21-ad28-eab3400ab47a"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Roll Dice"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4dec53df-b9c6-417f-8b90-8b32904dfbd5"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Spin Slots"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""UIControls"",
            ""id"": ""666886a9-2733-4105-86cc-bee9691748f6"",
            ""actions"": [
                {
                    ""name"": ""Select"",
                    ""type"": ""Button"",
                    ""id"": ""77d1ac18-0964-4260-8911-f0c7a73017bc"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""88a9d104-3580-443c-b087-b5cda77d9175"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Select"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // WorldControls
        m_WorldControls = asset.FindActionMap("WorldControls", throwIfNotFound: true);
        m_WorldControls_Movement = m_WorldControls.FindAction("Movement", throwIfNotFound: true);
        m_WorldControls_Jump = m_WorldControls.FindAction("Jump", throwIfNotFound: true);
        m_WorldControls_Consume = m_WorldControls.FindAction("Consume", throwIfNotFound: true);
        m_WorldControls_PickUpObject = m_WorldControls.FindAction("Pick Up Object", throwIfNotFound: true);
        m_WorldControls_ScorpionsTail = m_WorldControls.FindAction("Scorpion's Tail", throwIfNotFound: true);
        // CasinoControls
        m_CasinoControls = asset.FindActionMap("CasinoControls", throwIfNotFound: true);
        m_CasinoControls_SelectCard = m_CasinoControls.FindAction("Select Card", throwIfNotFound: true);
        m_CasinoControls_RollDice = m_CasinoControls.FindAction("Roll Dice", throwIfNotFound: true);
        m_CasinoControls_SpinSlots = m_CasinoControls.FindAction("Spin Slots", throwIfNotFound: true);
        // UIControls
        m_UIControls = asset.FindActionMap("UIControls", throwIfNotFound: true);
        m_UIControls_Select = m_UIControls.FindAction("Select", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // WorldControls
    private readonly InputActionMap m_WorldControls;
    private List<IWorldControlsActions> m_WorldControlsActionsCallbackInterfaces = new List<IWorldControlsActions>();
    private readonly InputAction m_WorldControls_Movement;
    private readonly InputAction m_WorldControls_Jump;
    private readonly InputAction m_WorldControls_Consume;
    private readonly InputAction m_WorldControls_PickUpObject;
    private readonly InputAction m_WorldControls_ScorpionsTail;
    public struct WorldControlsActions
    {
        private @PlayerControls m_Wrapper;
        public WorldControlsActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_WorldControls_Movement;
        public InputAction @Jump => m_Wrapper.m_WorldControls_Jump;
        public InputAction @Consume => m_Wrapper.m_WorldControls_Consume;
        public InputAction @PickUpObject => m_Wrapper.m_WorldControls_PickUpObject;
        public InputAction @ScorpionsTail => m_Wrapper.m_WorldControls_ScorpionsTail;
        public InputActionMap Get() { return m_Wrapper.m_WorldControls; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(WorldControlsActions set) { return set.Get(); }
        public void AddCallbacks(IWorldControlsActions instance)
        {
            if (instance == null || m_Wrapper.m_WorldControlsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_WorldControlsActionsCallbackInterfaces.Add(instance);
            @Movement.started += instance.OnMovement;
            @Movement.performed += instance.OnMovement;
            @Movement.canceled += instance.OnMovement;
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
            @Consume.started += instance.OnConsume;
            @Consume.performed += instance.OnConsume;
            @Consume.canceled += instance.OnConsume;
            @PickUpObject.started += instance.OnPickUpObject;
            @PickUpObject.performed += instance.OnPickUpObject;
            @PickUpObject.canceled += instance.OnPickUpObject;
            @ScorpionsTail.started += instance.OnScorpionsTail;
            @ScorpionsTail.performed += instance.OnScorpionsTail;
            @ScorpionsTail.canceled += instance.OnScorpionsTail;
        }

        private void UnregisterCallbacks(IWorldControlsActions instance)
        {
            @Movement.started -= instance.OnMovement;
            @Movement.performed -= instance.OnMovement;
            @Movement.canceled -= instance.OnMovement;
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
            @Consume.started -= instance.OnConsume;
            @Consume.performed -= instance.OnConsume;
            @Consume.canceled -= instance.OnConsume;
            @PickUpObject.started -= instance.OnPickUpObject;
            @PickUpObject.performed -= instance.OnPickUpObject;
            @PickUpObject.canceled -= instance.OnPickUpObject;
            @ScorpionsTail.started -= instance.OnScorpionsTail;
            @ScorpionsTail.performed -= instance.OnScorpionsTail;
            @ScorpionsTail.canceled -= instance.OnScorpionsTail;
        }

        public void RemoveCallbacks(IWorldControlsActions instance)
        {
            if (m_Wrapper.m_WorldControlsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IWorldControlsActions instance)
        {
            foreach (var item in m_Wrapper.m_WorldControlsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_WorldControlsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public WorldControlsActions @WorldControls => new WorldControlsActions(this);

    // CasinoControls
    private readonly InputActionMap m_CasinoControls;
    private List<ICasinoControlsActions> m_CasinoControlsActionsCallbackInterfaces = new List<ICasinoControlsActions>();
    private readonly InputAction m_CasinoControls_SelectCard;
    private readonly InputAction m_CasinoControls_RollDice;
    private readonly InputAction m_CasinoControls_SpinSlots;
    public struct CasinoControlsActions
    {
        private @PlayerControls m_Wrapper;
        public CasinoControlsActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @SelectCard => m_Wrapper.m_CasinoControls_SelectCard;
        public InputAction @RollDice => m_Wrapper.m_CasinoControls_RollDice;
        public InputAction @SpinSlots => m_Wrapper.m_CasinoControls_SpinSlots;
        public InputActionMap Get() { return m_Wrapper.m_CasinoControls; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CasinoControlsActions set) { return set.Get(); }
        public void AddCallbacks(ICasinoControlsActions instance)
        {
            if (instance == null || m_Wrapper.m_CasinoControlsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_CasinoControlsActionsCallbackInterfaces.Add(instance);
            @SelectCard.started += instance.OnSelectCard;
            @SelectCard.performed += instance.OnSelectCard;
            @SelectCard.canceled += instance.OnSelectCard;
            @RollDice.started += instance.OnRollDice;
            @RollDice.performed += instance.OnRollDice;
            @RollDice.canceled += instance.OnRollDice;
            @SpinSlots.started += instance.OnSpinSlots;
            @SpinSlots.performed += instance.OnSpinSlots;
            @SpinSlots.canceled += instance.OnSpinSlots;
        }

        private void UnregisterCallbacks(ICasinoControlsActions instance)
        {
            @SelectCard.started -= instance.OnSelectCard;
            @SelectCard.performed -= instance.OnSelectCard;
            @SelectCard.canceled -= instance.OnSelectCard;
            @RollDice.started -= instance.OnRollDice;
            @RollDice.performed -= instance.OnRollDice;
            @RollDice.canceled -= instance.OnRollDice;
            @SpinSlots.started -= instance.OnSpinSlots;
            @SpinSlots.performed -= instance.OnSpinSlots;
            @SpinSlots.canceled -= instance.OnSpinSlots;
        }

        public void RemoveCallbacks(ICasinoControlsActions instance)
        {
            if (m_Wrapper.m_CasinoControlsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ICasinoControlsActions instance)
        {
            foreach (var item in m_Wrapper.m_CasinoControlsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_CasinoControlsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public CasinoControlsActions @CasinoControls => new CasinoControlsActions(this);

    // UIControls
    private readonly InputActionMap m_UIControls;
    private List<IUIControlsActions> m_UIControlsActionsCallbackInterfaces = new List<IUIControlsActions>();
    private readonly InputAction m_UIControls_Select;
    public struct UIControlsActions
    {
        private @PlayerControls m_Wrapper;
        public UIControlsActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Select => m_Wrapper.m_UIControls_Select;
        public InputActionMap Get() { return m_Wrapper.m_UIControls; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(UIControlsActions set) { return set.Get(); }
        public void AddCallbacks(IUIControlsActions instance)
        {
            if (instance == null || m_Wrapper.m_UIControlsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_UIControlsActionsCallbackInterfaces.Add(instance);
            @Select.started += instance.OnSelect;
            @Select.performed += instance.OnSelect;
            @Select.canceled += instance.OnSelect;
        }

        private void UnregisterCallbacks(IUIControlsActions instance)
        {
            @Select.started -= instance.OnSelect;
            @Select.performed -= instance.OnSelect;
            @Select.canceled -= instance.OnSelect;
        }

        public void RemoveCallbacks(IUIControlsActions instance)
        {
            if (m_Wrapper.m_UIControlsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IUIControlsActions instance)
        {
            foreach (var item in m_Wrapper.m_UIControlsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_UIControlsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public UIControlsActions @UIControls => new UIControlsActions(this);
    public interface IWorldControlsActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnConsume(InputAction.CallbackContext context);
        void OnPickUpObject(InputAction.CallbackContext context);
        void OnScorpionsTail(InputAction.CallbackContext context);
    }
    public interface ICasinoControlsActions
    {
        void OnSelectCard(InputAction.CallbackContext context);
        void OnRollDice(InputAction.CallbackContext context);
        void OnSpinSlots(InputAction.CallbackContext context);
    }
    public interface IUIControlsActions
    {
        void OnSelect(InputAction.CallbackContext context);
    }
}
